{"version":3,"sources":["components/Contact.js","components/Contacts.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Contact","state","onShowClick","e","this","props","contact","name","email","phone","className","onClick","Component","Contacts","contacts","id","map","key","Header","branding","href","defaultProps","PropTypes","string","isRequired","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wOA6BeA,E,4MAzBbC,MAAQ,G,EACRC,YAAc,SAACC,K,uDAEL,IAAD,EACwBC,KAAKC,MAAMC,QAAlCC,EADD,EACCA,KAAMC,EADP,EACOA,MAAOC,EADd,EACcA,MACrB,OACE,yBAAKC,UAAU,uBACb,4BACGH,EADH,IACS,uBAAGI,QAASP,KAAKF,YAAaQ,UAAU,sBAEjD,wBAAIA,UAAU,cACZ,wBAAIA,UAAU,mBAAmBF,GACjC,wBAAIE,UAAU,mBAAmBD,S,GAbrBG,aCDDC,E,4MACnBZ,MAAQ,CACNa,SAAU,CACR,CACEC,GAAI,EACJR,KAAM,YACNC,MAAO,kBACPC,MAAO,eAET,CACEM,GAAI,EACJR,KAAM,YACNC,MAAO,kBACPC,MAAO,eAET,CACEM,GAAI,EACJR,KAAM,YACNC,MAAO,kBACPC,MAAO,iB,uDAKH,IACAK,EAAaV,KAAKH,MAAlBa,SACR,OACE,6BACGA,EAASE,KAAI,SAACV,GAAD,OACZ,kBAAC,EAAD,CAASW,IAAKX,EAAQS,GAAIT,QAASA,Y,GA7BPM,a,gBCChCM,EAAS,SAACb,GAAW,IACjBc,EAAad,EAAbc,SACR,OACE,yBACET,UAAU,mEAGV,yBAAKA,UAAU,aACb,uBAAGU,KAAK,IAAIV,UAAU,gBACnBS,IAGL,6BACE,wBAAIT,UAAU,sBACZ,wBAAIA,UAAU,YACZ,uBAAGU,KAAK,IAAIV,UAAU,YAAtB,aASZQ,EAAOG,aAAe,CACpBF,SAAU,UAGZD,EAAOG,aAAe,CAAEF,SAAUG,IAAUC,OAAOC,YAEpCN,QCdAO,G,mLAXX,OACE,yBAAKf,UAAU,OACb,kBAAC,EAAD,CAAQS,SAAS,mBACjB,yBAAKT,UAAU,cACb,kBAAC,EAAD,Y,GANQE,cCMEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2628fd75.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Contact extends Component {\r\n  state = {};\r\n  onShowClick = (e) => {};\r\n\r\n  render() {\r\n    const { name, email, phone } = this.props.contact;\r\n    return (\r\n      <div className=\"card card-body mb-3\">\r\n        <h3>\r\n          {name} <i onClick={this.onShowClick} className=\"fas fa-sort-down\"></i>\r\n        </h3>\r\n        <ul className=\"list-group\">\r\n          <li className=\"list-group-item\">{email}</li>\r\n          <li className=\"list-group-item\">{phone}</li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nContact.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  email: PropTypes.string.isRequired,\r\n  phone: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Contact;\r\n","import React, { Component } from \"react\";\r\nimport Contact from \"./Contact\";\r\nexport default class Contacts extends Component {\r\n  state = {\r\n    contacts: [\r\n      {\r\n        id: 1,\r\n        name: \"john wick\",\r\n        email: \"jwick@gmail.com\",\r\n        phone: \"90909090909\",\r\n      },\r\n      {\r\n        id: 2,\r\n        name: \"Lohn wick\",\r\n        email: \"lwick@gmail.com\",\r\n        phone: \"90909090907\",\r\n      },\r\n      {\r\n        id: 3,\r\n        name: \"Rohn wick\",\r\n        email: \"rwick@gmail.com\",\r\n        phone: \"90909090908\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  render() {\r\n    const { contacts } = this.state;\r\n    return (\r\n      <div>\r\n        {contacts.map((contact) => (\r\n          <Contact key={contact.id} contact={contact} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Header = (props) => {\r\n  const { branding } = props;\r\n  return (\r\n    <nav\r\n      className=\"nav.navbar.navbar-expand-sm.navbar-dark \r\n    bg-danger mb-3 py-0 \"\r\n    >\r\n      <div className=\"container\">\r\n        <a href=\"/\" className=\"navbar-brand\">\r\n          {branding}\r\n        </a>\r\n      </div>\r\n      <div>\r\n        <ul className=\"navbar-nav mr-auto\">\r\n          <li className=\"nav-item\">\r\n            <a href=\"/\" className=\"nav-link\">\r\n              Home\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\nHeader.defaultProps = {\r\n  branding: \"my app\",\r\n};\r\n\r\nHeader.defaultProps = { branding: PropTypes.string.isRequired };\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\nimport Contacts from \"./components/Contacts\";\nimport Header from \"./components/Header\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header branding=\"Contact Manger\" />\n        <div className=\"containter\">\n          <Contacts />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}